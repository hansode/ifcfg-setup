#!/bin/bash
#
# description:
#
# requires:
#  bash
#  tee, egrep, cat
#

## base

IFCFG_PATH_PREFIX=${IFCFG_PATH_PREFIX:-/etc/sysconfig/network-scripts/ifcfg}
IFCFG_BONDING_CONF_PATH=${IFCFG_BONDING_CONF_PATH:-/etc/modprobe.d/bonding.conf}
IFCFG_VLAN_CONF_PATH=${IFCFG_VLAN_CONF_PATH:-/etc/sysconfig/network}

function gen_ifcfg_path() {
  local ifname=${1:-eth0}
  local ifcfg_path=${IFCFG_PATH_PREFIX}

  echo ${ifcfg_path}-${ifname}
}

function install_ifcfg_file() {
  local ifname=${1:-eth0}

  tee $(gen_ifcfg_path ${ifname}) </dev/stdin
}

function beautify_config_body() {
  cat | egrep -v '^#|^$'
}

function config_line_in_file() {
  local config_path=${1} entry=${2}

  if [[ ! -f "${config_path}" ]]; then
    : > ${config_path}
  fi
  egrep -q -w "^${entry}" ${config_path} || {
    echo ${entry} >> ${config_path}
  }
}

function render_ifcfg_network_configuration() {
  unset onboot ip mask net bcast gw
  # don't use "shift" here
  [[ ${#} == 0 ]] || eval local "${@}"

  local bootproto=none

  if [[ -n "${ip}" ]]; then
    bootproto=static
  fi

  beautify_config_body <<-EOS
	BOOTPROTO=${bootproto}
	ONBOOT=${onboot:-yes}
	EOS

  case ${bootproto} in
    static)
      beautify_config_body <<-EOS
	IPADDR=${ip}
	$([[ -z "${mask}"  ]] || echo "NETMASK=${mask}")
	$([[ -z "${net}"   ]] || echo "NETWORK=${net}")
	$([[ -z "${bcast}" ]] || echo "BROADCAST=${bcast}")
	$([[ -z "${gw}"    ]] || echo "GATEWAY=${gw}")
	EOS
      ;;
  esac
}

# 0:       configure_${type}_conf optional
# 1:    render_ifcfg_${type}      required
# 2:   install_ifcfg_${type}      required
# 3: configure_ifcfg_${type}_map  optional

## net/ethernet

### 1:

function render_ifcfg_ethernet() {
  local ifname=${1:-eth0}
  unset ip mask net bcast gw onboot
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  beautify_config_body <<-EOS
	DEVICE=${ifname}
	TYPE=Ethernet
	EOS

  render_ifcfg_network_configuration "${@}"
}

### 2:

function install_ifcfg_ethernet() {
  local ifname=${1:-eth0}
  unset ip mask net bcast gw
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  render_ifcfg_ethernet ${ifname} ip=${ip} mask=${mask} net=${net} bcast=${bcast} gw=${gw} | install_ifcfg_file ${ifname}
}

## driver/bonding

### 0:

function configure_bonding_conf() {
  local ifname=${1:-bond0}

  local config_path=${IFCFG_BONDING_CONF_PATH}
  local entry="alias ${ifname} bonding"

  config_line_in_file ${config_path} "${entry}"
}

### 1:master

function render_ifcfg_bond_master() {
  local ifname=${1:-bond0}
  unset mode onboot
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  local bond_opts="mode=${mode:-1}"
  local bond_params="
    max_bonds
    num_grat_arp
    num_unsol_na
    miimon
    updelay
    downdelay
    use_carrier
    primary
    lacp_rate
    ad_select
    xmit_hash_policy
    arp_interval
    arp_ip_target
    arp_validate
    fail_over_mac
  "

  local __param
  for __param in ${bond_params}; do
    eval "
      [[ -z "\$${__param}" ]] || bond_opts=\"\${bond_opts} \${__param}=\$${__param}\"
    "
  done

  beautify_config_body <<-EOS
	DEVICE=${ifname}
	EOS

  render_ifcfg_network_configuration "${@}"

  beautify_config_body <<-EOS
	BONDING_OPTS="${bond_opts}"
	EOS
}

### 2:master

function install_ifcfg_bond_master() {
  local ifname=${1:-bond0}
  unset mode
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  render_ifcfg_bond_master ${ifname} mode=${mode} | install_ifcfg_file ${ifname}
}

### 1:slave

function render_ifcfg_bond_slave() {
  local ifname=${1:-eth0}
  unset master onboot
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  beautify_config_body <<-EOS
	DEVICE=${ifname}
	EOS

  render_ifcfg_network_configuration "${@}"

  beautify_config_body <<-EOS
	MASTER=${master}
	SLAVE=yes
	EOS
}

### 2:slave

function install_ifcfg_bond_slave() {
  local ifname=${1:-eth0}
  unset master
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  render_ifcfg_bond_slave ${ifname} master=${master} | install_ifcfg_file ${ifname}
}

### 3:

function configure_ifcfg_bond_map() {
  local ifname=${1:-bond0}
  unset mode master slave
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  configure_bonding_conf    ${ifname}
  install_ifcfg_bond_master ${ifname} mode=${mode}
  install_ifcfg_bond_slave  ${slave}  master=${ifname}
}

## net/bridge

### 1:

function render_ifcfg_bridge() {
  local ifname=${1:-br0}
  unset address onboot
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  beautify_config_body <<-EOS
	DEVICE=${ifname}
	TYPE=Bridge
	EOS

  render_ifcfg_network_configuration "${@}"

  beautify_config_body <<-EOS
	$([[ -z "${address}" ]] || echo "MACADDR=${address}")
	EOS
}

### 2:

function install_ifcfg_bridge() {
  local ifname=${1:-br0}
  unset address
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  render_ifcfg_bridge ${ifname} address=${address} | install_ifcfg_file ${ifname}
}

### 3:

function configure_ifcfg_bridge_map() {
  local ifname=${1:-br0}
  local slave
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  install_ifcfg_bridge ${ifname} "${@}"

  local config_path=$(gen_ifcfg_path ${slave})
  local entry="BRIDGE=${ifname}"

  config_line_in_file ${config_path} "${entry}"
}

## net/8021q

### 0:

function configure_vlan_conf() {
  local line

  local config_path=${IFCFG_VLAN_CONF_PATH}
  while read line; do
    set ${line}
    if ! egrep -q -w "^${line}" ${config_path}; then
      echo ${line} >> ${config_path}
    fi
  done < <(beautify_config_body <<-EOS
	VLAN=yes
	VLAN_NAME_TYPE=VLAN_PLUS_VID_NO_PAD
	EOS
  )
}

### 1:

function render_ifcfg_vlan() {
  local ifname=${1:-vlan1000}
  unset onboot
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  beautify_config_body <<-EOS
	DEVICE=${ifname}
	EOS

  render_ifcfg_network_configuration "${@}"
}

### 2:

function install_ifcfg_vlan() {
  local ifname=${1:-vlan1000}
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  render_ifcfg_vlan ${ifname} | install_ifcfg_file ${ifname}
}

### 3:

function configure_ifcfg_vlan_map() {
  local ifname=${1:-vlan1000}
  local physdev
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  install_ifcfg_vlan ${ifname}

  local config_path=$(gen_ifcfg_path ${ifname})
  local entry="PHYSDEV=${physdev}"

  config_line_in_file ${config_path} "${entry}"
}

## net/tap

### 1:

function render_ifcfg_tap() {
  local ifname=${1:-tap0}
  unset address
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  beautify_config_body <<-EOS
	DEVICE=${ifname}
	TYPE=Tap
	EOS

  render_ifcfg_network_configuration "${@}"

  beautify_config_body <<-EOS
	$([[ -z "${address}" ]] || echo "MACADDR=${address}")
	EOS
}

### 2:

function install_ifcfg_tap() {
  local ifname=${1:-tap0}
  unset address
  shift; [[ ${#} == 0 ]] || eval local "${@}"

  render_ifcfg_tap ${ifname} address=${address} | install_ifcfg_file ${ifname}
}
